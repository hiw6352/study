================ <git 설치>  =========================================

1. https://git-scm.com/ 해당 링크에서 git을 다운로드 받고 설치한다.
https://goddaehee.tistory.com/216?category=381481 ---> 자세한 설치방법을 설명한 링크

====================== <git 명령어, 저장소 만들기 및 커밋하기> ==================
1.git init
- 로컬 저장소로 사용할 폴더를 생성하여 해당 폴더로 이동한다.
- 해당 폴더에서 마우스 우클릭 > git bash 실행 > "git init" 명령어 실행
- intitalized empty Git repository in [경로] 이렇게 한 줄이 찍히고 .git이라는 숨겨진 폴더가 생성된다.
	* 해당 폴더가 보이지 않을 시 숨긴항목 표시하기를 체크
- .git 디렉토리에는 저장소에 필요한 뼈대 파일이 들어 있다.
- 별도 설정을 하지 않는다면 git config --global 옵션으로 설정 되어있는 정보들을 적용한다.
- 현재 설정정보 조회 -----> git config --global --list

2. git status
- 파일 상태 확인 명령어 이다.
- On branch : 현재 작업중인 branch (기본 branch : master)
- 아직 커밋된 파일이 없음을 확인 할 수 있다.

※ 파일 상태 2가지
1) Untracked 상태
 - 단어 의미대로 '추적되지 않고 있는' 파일 이란 뜻이다. 즉 파일을 생성한 후 한번도 add 하지 않은 상태.
2) Tracked 상태
 - 파일이 Git에 의해 그 변동사항이 추적되는 상태이다. 이 상태는 또 특성에 따라 3가지로 나뉜다.
2.1) Staged 상태 : 파일 수정 후 staging area에 올라가 있는 상태
2.2) Unmodified 상태 : 현재 파일이 최신 커밋 파일과 비교하여 바뀐게 없는 상태
2.3) Modified 상태 : 현재 파일이 최신 커밋 파일과 비교하여 바뀐게 있는 상태

3. git의 4가지 영역

1) Working Directory (작업영역)
 - 실제 프로젝트 디렉토리
 - .git 이력과 관련 정보가 저장 된 .git을 제외한 모든 영역
 - 실제 코드의 추가, 수정, 삭제 작업이 이루어지는 영역

2) Repository (저장소)
 - 파일, 폴더를 변경 이력별로 저장해 두는 곳
 - .git 디렉토리내 존재하며 2가지로 나뉜다.
 - 2.1) Local Repository : 개인 PC에 파일이 저장되는 개인 저장소
 - 2.2) Remote Repository : 원격 저장소 전용 서버에서 관리되며, 여러 사람들과 같이 공유도 가능한 저장소

3) Index (Staging Area)
 - Working Directory에서 Repository로 정보 저장 전 준비 영역
 - 파일 상태를 기록, 스테이징 한다고 표현 한다.
 - .git/index 파일로 관리된다.
 - 3.1) git add : Working Directory 에서 Index 영역으로 정보가 저장됨.
 - 3.2) git commit : Index영역에서 Repository로 정보가 저장됨.

4) Stash
 - 위의 3가지 영역과 다른 별개의 임시 영역
 - 임시적으로 작업사항을 저장해두고 나중에 꺼내올 수 있다.

4. git add
- index에 파일 추가 하는 명령어 이다.
(unstacked files의 파일들, changed but not updated 파일들을 스테이징에 add)
- 옵션: -A, --all 변경된 모든 파일 추가
- 신규 파일을 해당 폴더에 추가해 보자.
- test.txt파일이 인덱스(Staging Area)에 포함 된 것을 확인할 수 있다.
- 'Changes to be committed' 목록에 있는 파일들은 Staged 상태라는 것을 의미 한다.
- 파일이 많은 경우엔 git add . 명령을 이용하여 해당 폴더의 Unstacked Files 모두 한번에 stage하는 것도 가능하다. (git add --all, git add -A)

5. git rm
* git rm --cached test.txt
1) --cached : Index에 추가된 파일을 staging area에서 제외(working directory의 파일은 유지)
2) -f, --force : 삭제하려는 파일의 내용이 브랜치 끝 부분에서의 내용과 다를 경우 강제 삭제
3) --ignore-unmatch : 삭제하려는 파일이 없을 때 발생하는 에러 무시

6. git commit
 - 변경사항 확정에 사용하는 명령어이다.
6.1 git commit -m "커밋 메세지" 
 - 스테이징 영역의 파일들을 커밋한다.
 - -m은 커밋메세지 옵션
 - 여러 줄의 커밋메세지는 여러개의 -m 을 사용하여 처리 가능 하다.
6.2 git commit -a : 자동으로 add를 진행한 후 커밋
 - 별도의 add명령어를 사용하지 않고 수정된 파일에 대해 add, commit을 한번에 수행한다.
 - 한번도 add되지 않은 파일은 add를 따로 작업 해줘야 한다.
6.3 git commit -am "커밋 메세지" : a, m의 옵션을 합친 형태.
6.4 git commit -v : 커밋 메세지에 diff의 내용 포함
6.5 git commit --amend : 최신 커밋 메세지를 수정하여 커밋 할 수 있다.(신규 커밋 메세지 추가 되지 않음)

7. git log
git log
git log : commit history 확인
 - Author 영역의 이름과 이메일 주소는 git config 명령을 통해 세팅했던 user.name / user.email 값이 표기 된다.

※ 옵션
-p : 변경사항 확인
--oneline : 커밋 메세지만 한줄씩 표시
--all : 모든 브랜치 로그 표시
--graph : 브랜치 트리 그래프 표시

※ Git은 각 커밋 마다 아이디를 부여하여 구별하는데 위 예제에서
commit 3965dff6525d151af526e5b45d144027532b8171 (HEAD -> master)
숫자로 되어있는 부분이 커밋 아이디, 커밋 해시라고 부른다.
 - 다만 위와 같이 커밋 로그를 보려면 매우 길어지고 보기 힘들기 때문에 git log 옵션중 pretty 옵션을 사용하여 더 이쁘게 볼 수 있다.
 - 이후 원하는 커밋 로그의 ID를 좀더 자세히 조회할 수 있다. (ID값이 겹치지 않는다는 가정하에 4자리~5자리 까지만 입력해도 조회 가능하다.)
 - mavenCentral() => +//mavenCentral() : -기호의 빨간색이 이전 커밋, + 기호의 초록색이 이후 커밋 내용임을 간단히 확인 가능 하다.

8. git diff

※ 옵션 : --staged
 - 마지막 커밋과 staging area의 차이 확인
※ 옵션 : 커밋ID 커밋ID : 두 커밋 ID간의 차이 확인

9. git reset

- 과거 커밋으로 돌아가고 싶을때 사용한다.
- 문법 : git reset [옵션] [커밋id]

10. git tag

 - 우리는 커밋 메세지를 통해 관련 정보를 남기고 있지만, 다른 커밋보다 좀더 중요한 경우 태그(tag)를 추가로 달 수 있다.
 - 문법 : git tag [태그 이름] [커밋 아이디]
 - 태그 리스트 조회 : git tag
 - 해당 태그 상세 조회 : git show 태그명

========================== GitHub Repository(원격저장소) 생성, GitBash로 연결, 초대하기 =========================================
****계정 생성 및 원격 저장소 생성 부분 생략

1) git Remote
 - 문법 : git remote add <remote repo 이름> <repo url>
 - URL은 제일 상단 부에서 확인 가능하고, 클립보드에 복사하도록 제공 하기도 한다.
*** git remote add origin https://github.com/hiw6352/developDj.git 원격저장소와 연결

- git remote : 추가한 원격저장소의 목록 확인
   (상세히 git remote -v)
 - git remote show 이름 : 특정 원격 저장소의 정보를 확인할 수 있다.

2) git push
 - 로컬 저장소에 commit한 파일들을 원격 저장소에 추가 하는 명령어.
 - git push [원격 저장소 이름(별명)] [브랜치명]
   ex) git push origin master
 - 파라미터가 없으면 origin 저장소에 푸시한다.

ex) README.md 파일을 생성하여 커밋
- 파일 PUSH --> git push -u origin master

3. Remote Repository, 원격 저장소 다른 사용자 초대하기
 - "Settings"탭 클릭 > Manage access > "invite a collaborator" 클릭
 - 초대한 사용자 입력, 선태 하기
 - 메일을 확인하면 해당 repository invite 메일이 와있을 것이다. "View invitation" 클릭
 - 초대 수락 클릭 ("Accept invitation" Click)
※ 초대 받은 사용자 또한 위의 명령어를 통해 원격 저장소를 연결 해보자.

1) git clone

 - git clone [remote repo 주소]
ex) git clone https://github.com/hiw6352/developDj.git

2) git pull
 - git pull [원격 저장소 이름(별명)] [브랜치명]
   ex) git pull origin master
 - git fetch에서 하는 원격저장소의 변경사항을 가져와서 지역브랙치에 합치는 작업을 한다.
 - 즉 다른 사람들의 작업 변경사항을 클라이언트로 내려받기 한다고 보면 된다.

[Git (7)] Github 비밀번호 입력 없이 pull/push 하기(github ssh key 설정) ===> 링크 참조
출처: https://goddaehee.tistory.com/254?category=381481 [갓대희의 작은공간]